/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

&mt {
    tapping-term-ms = <300>;
    quick-tap-ms = <150>;
    flavor = "tap-preferred";
};

&lt { 
    quick-tap-ms = <150>; 
    flavor = "hold-preferred";
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 9 10 11 18 19 21 22 23 30 31 32 33 34 35 39 40 41 8 20>; // right side home row key positions
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // left side home row key positions
            hold-trigger-on-release;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            fire-hold-as-tap;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_f1 {
            bindings = <&kp F1>;
            key-positions = <1 13>;
            layers = <1>;
        };

        combo_f2 {
            bindings = <&kp F2>;
            key-positions = <2 14>;
            layers = <1>;
        };

        combo_f3 {
            bindings = <&kp F3>;
            key-positions = <3 15>;
            layers = <1>;
        };

        combo_f4 {
            bindings = <&kp F4>;
            key-positions = <4 16>;
            layers = <1>;
        };

        combo_f5 {
            bindings = <&kp F5>;
            key-positions = <17 5>;
            layers = <1>;
        };

        combo_f6 {
            bindings = <&kp F6>;
            key-positions = <6 18>;
            layers = <1>;
        };

        combo_f7 {
            bindings = <&kp F7>;
            key-positions = <7 19>;
            layers = <1>;
        };

        combo_f8 {
            bindings = <&kp F8>;
            key-positions = <20 8>;
            layers = <1>;
        };

        combo_f9 {
            bindings = <&kp F9>;
            key-positions = <9 21>;
            layers = <1>;
        };

        combo_f10 {
            bindings = <&kp F10>;
            key-positions = <10 22>;
            layers = <1>;
        };

        combo_f11 {
            bindings = <&kp F11>;
            key-positions = <11 23>;
            layers = <1>;
        };

        combo_f12 {
            bindings = <&kp F12>;
            key-positions = <23 35>;
            layers = <1>;
        };

        combo_vi_prev {
            bindings = <&kp HASH>;
            key-positions = <6 7>;
            layers = <4>;
        };

        combo_vi_next {
            bindings = <&kp STAR>;
            key-positions = <18 19>;
            layers = <4>;
        };

        combo_vi_start {
            bindings = <&kp CARET>;
            key-positions = <19 7>;
            layers = <4>;
        };

        combo_vi_end {
            bindings = <&kp DOLLAR>;
            key-positions = <9 21>;
            layers = <4>;
        };

        combo_vi_match {
            bindings = <&kp PERCENT>;
            key-positions = <31 30>;
            layers = <4>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main {
            bindings = <
&kp GRAVE  &kp SQT       &kp COMMA    &kp DOT              &kp P         &kp Y          &kp F                    &kp G            &kp C            &kp R        &kp L          &ht LC(SPACE) BACKSLASH
&kp TAB    &hml LSHFT A  &hml LALT O  &hml LEFT_CONTROL E  &hml LGUI U   &kp I          &mt LS(LA(LC(LG(T)))) D  &hmr RGUI H      &hmr RCTRL T     &hmr RALT N  &hmr RSHIFT S  &ht LA(LS(MINUS)) MINUS
&kp LSHFT  &kp SEMI      &kp Q        &kp J                &kp K         &kp X          &kp B                    &kp M            &kp W            &kp V        &kp Z          &ht LG(BACKSLASH) SLASH
                                      &kp LGUI             &lt 1 ESCAPE  &lt 2 ENTER    &lt 3 SPACE              &lt 4 BACKSPACE  &kp RIGHT_SHIFT
            >;
        };

        system {
            bindings = <
&kp LA(LG(N8))            &kp C_VOL_DN  &kp C_VOLUME_UP  &kp LG(C)   &kp LG(V)         &kp LG(LC(SPACE))    &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(LC(LG(NUMBER_4)))  &kp C_MUTE    &kp C_PREVIOUS   &kp C_NEXT  &kp C_PLAY_PAUSE  &kp LA(LG(ENTER))    &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOICE_COMMAND       &trans        &trans           &trans      &trans            &trans               &trans  &trans  &trans  &trans  &trans  &trans
                                                         &trans      &trans            &trans               &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5        &mt PIPE AMPS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp ASTERISK   &kp CARET         &kp DOLLAR
&trans  &hml LSHFT N6 &hml LALT N7  &hml LCTRL N8 &hml LGUI N9  &kp N0        &kp AT         &hmr RGUI LEFT_PARENTHESIS &hmr RCTRL RIGHT_PARENTHESIS &hmr RALT LESS_THAN &hmr RSHIFT GREATER_THAN &kp MINUS
&trans  &kp PLUS      &kp MINUS     &kp ASTERISK  &kp SLASH     &kp PERIOD    &kp EXCL       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL      &kp PLUS          &kp HASH
                                    &trans        &trans        &trans        &trans         &kp DELETE            &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &msc SCRL_DOWN  &mkp LCLK       &mmv MOVE_UP     &mkp RCLK        &ht ENTER LC(LEFT)  &ht ESCAPE LC(RIGHT)
&trans  &trans  &trans  &trans  &mkp MB1  &trans    &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp LGUI            &kp LC(UP_ARROW)
&trans  &trans  &trans  &trans  &trans    &trans    &tog 6          &none           &msc SCRL_RIGHT  &msc SCRL_LEFT   &kp LA(LCMD)        &kp LG(F3)
                        &trans  &trans    &trans    &trans          &trans          &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &ht LG(UP_ARROW) PAGE_UP      &kp LG(LEFT)        &kp UP_ARROW                    &kp LG(RIGHT)  &ht ENTER LC(LG(LEFT_ARROW))  &ht ESCAPE LC(LG(RIGHT))
&trans  &trans  &trans  &trans  &trans  &trans    &ht LG(DOWN_ARROW) PAGE_DOWN  &kp LEFT            &kp DOWN_ARROW                  &kp RIGHT      &ht LC(LG(Y)) LC(NUMBER_6)    &ht LC(LG(C)) F6
&trans  &trans  &trans  &trans  &trans  &trans    &ht LA(LG(COMMA)) LC(GRAVE)   &kp LA(LEFT_ARROW)  &ht LC(LG(J)) LC(LG(UP_ARROW))  &kp LA(RIGHT)  &ht LG(LS(C)) LS(LG(O))       &ht F8 F7
                        &trans  &trans  &trans    &trans                        &trans              &trans
            >;
        };

        board {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &trans  &trans    &kp UP    &trans     &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &kp DOWN      &kp UP        &trans        &trans  &trans    &trans    &trans     &trans  &trans
                                    &trans        &trans        &trans        &trans  &trans    &trans
            >;
        };

        mouse_hold {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &msc SCRL_DOWN  &mkp LCLK       &mmv MOVE_UP     &mkp RCLK        &ht ENTER LC(LEFT)  &ht ESCAPE LC(RIGHT)
&trans  &trans  &trans  &trans  &mkp MB1  &trans    &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp LGUI            &kp LC(UP_ARROW)
&trans  &trans  &trans  &trans  &trans    &trans    &tog 6          &none           &msc SCRL_RIGHT  &msc SCRL_LEFT   &kp LA(LCMD)        &kp LG(F3)
                        &trans  &trans    &trans    &mkp LCLK       &mkp RCLK       &trans
            >;
        };
    };
};
