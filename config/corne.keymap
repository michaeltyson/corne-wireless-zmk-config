/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;

            // tap: keycode | hold: modifier

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 9 10 11 18 19 21 22 23 30 31 32 33 34 35 39 40 41 8 20>; // right side home row key positions
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // left side home row key positions
            hold-trigger-on-release;
        };
    };
};

combos {
    compatible = "zmk,combos";

    number_1 {
        bindings = <&kp NUMBER_1>;
        key-positions = <1 13>; // top row index finger + home index
    };

    number_2 {
        bindings = <&kp NUMBER_2>;
        key-positions = <2 14>; // top row middle + home middle
    };

    number_3 {
        bindings = <&kp NUMBER_3>;
        key-positions = <3 15>; // top row ring + home ring
    };

    number_4 {
        bindings = <&kp NUMBER_4>;
        key-positions = <4 16>; // top row pinky + home pinky
    };

    number_5 {
        bindings = <&kp N5>;
        key-positions = <17 5>; // top row outer + home pinky (other side)
    };

    number_6 {
        bindings = <&kp NUMBER_6>;
        key-positions = <6 18>; // top row pinky + home pinky (right side)
    };

    number_7 {
        bindings = <&kp N7>;
        key-positions = <7 19>; // top row ring + home ring
    };

    number_8 {
        bindings = <&kp N8>;
        key-positions = <20 8>; // top row middle + home middle
    };

    number_9 {
        bindings = <&kp N9>;
        key-positions = <9 21>; // top row index + home index
    };

    number_0 {
        bindings = <&kp N0>;
        key-positions = <10 22>; // top row outer + home index (mirrored)
    };

    equals {
        bindings = <&kp EQUAL>;
        key-positions = <11 23>;
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp SQT       &kp COMMA    &kp DOT              &kp P        &kp Y         &kp F          &kp G        &kp C         &kp R        &kp L          &kp BSPC
&kp TAB    &hml LSHFT A  &hml LALT O  &hml LEFT_CONTROL E  &hml LGUI U  &kp I         &kp D          &hmr RGUI H  &hmr RCTRL T  &hmr RALT N  &hmr RSHIFT S  &mt LA(LS(MINUS)) MINUS
&kp LSHFT  &kp SEMI      &kp Q        &kp J                &kp K        &kp X         &kp B          &kp M        &kp W         &kp V        &kp Z          &kp SLASH
                                      &kp LGUI             &lt 1 ENTER  &kp ESCAPE    &kp BACKSPACE  &kp SPACE    &kp RALT
            >;
        };

        system {
            bindings = <
&kp LA(LG(N8))            &kp C_VOL_DN  &kp C_VOLUME_UP  &kp LG(C)   &kp LG(V)         &kp LG(LC(SPACE))    &kp F11  &kp F2  &kp F4  &kp F6  &kp F8  &trans
&kp LS(LC(LG(NUMBER_4)))  &kp C_MUTE    &kp C_PREVIOUS   &kp C_NEXT  &kp C_PLAY_PAUSE  &kp LA(LG(ENTER))    &kp N6   &kp N7  &kp N8  &kp N9  &kp N0  &trans
&kp C_VOICE_COMMAND       &trans        &trans           &trans      &trans            &trans               &trans   &trans  &trans  &trans  &trans  &trans
                                                         &trans      &trans            &trans               &trans   &trans  &trans
            >;
        };

        raise_layer {
            bindings = <
&trans     &kp DQT    &kp LT     &kp GT    &kp HASH   &kp N1       &kp N2     &kp AMPS   &kp RBRC  &kp LBRC  &kp PRCNT  &trans
&kp LCTRL  &kp EXCL   &kp MINUS  &kp PLUS  &kp EQUAL  &kp UNDER    &kp PIPE   &kp COLON  &kp RPAR  &kp LPAR  &kp QMARK  &trans
&trans     &kp CARET  &kp FSLH   &kp STAR  &kp BSLH   &kp DLLR     &kp GRAVE  &kp TILDE  &kp RBKT  &kp LBKT  &kp AT     &trans
                                 &trans    &trans     &trans       &trans     &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &bt BT_CLR    &trans  &trans    &kp UP    &trans     &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &kp DOWN      &kp UP  &trans        &trans  &trans    &trans    &trans     &trans  &trans
                                    &trans        &trans  &trans        &trans  &trans    &trans
            >;
        };
    };
};
