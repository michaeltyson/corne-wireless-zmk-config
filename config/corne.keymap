/*
 * Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;

            // tap: keycode | hold: modifier

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 9 10 11 18 19 21 22 23 30 31 32 33 34 35 39 40 41 8 20>; // right side home row key positions
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // left side home row key positions
            hold-trigger-on-release;
        };
    };
};

combos {
    compatible = "zmk,combos";

    combo_num1 {
        bindings = <&kp NUMBER_1>;
        key-positions = <1 13>; // top row index finger + home index
    };

    combo_num2 {
        bindings = <&kp NUMBER_2>;
        key-positions = <2 14>; // top row middle + home middle
    };

    combo_num3 {
        bindings = <&kp NUMBER_3>;
        key-positions = <3 15>; // top row ring + home ring
    };

    combo_num4 {
        bindings = <&kp NUMBER_4>;
        key-positions = <4 16>; // top row pinky + home pinky
    };

    combo_num5 {
        bindings = <&kp N5>;
        key-positions = <17 5>; // top row outer + home pinky (other side)
    };

    combo_num6 {
        bindings = <&kp NUMBER_6>;
        key-positions = <6 18>; // top row pinky + home pinky (right side)
    };

    combo_num7 {
        bindings = <&kp N7>;
        key-positions = <7 19>; // top row ring + home ring
    };

    combo_num8 {
        bindings = <&kp N8>;
        key-positions = <20 8>; // top row middle + home middle
    };

    combo_num9 {
        bindings = <&kp N9>;
        key-positions = <9 21>; // top row index + home index
    };

    combo_num0 {
        bindings = <&kp N0>;
        key-positions = <10 22>; // top row outer + home index (mirrored)
    };

    combo_equals {
        bindings = <&kp EQUAL>;
        key-positions = <11 23>;
    };

    combo_f1 {
        bindings = <&kp F1>;
        key-positions = <1 13>;
        layers = <1>;
    };

    combo_f2 {
        bindings = <&kp F2>;
        key-positions = <2 14>;
        layers = <1>;
    };

    combo_f3 {
        bindings = <&kp F3>;
        key-positions = <3 15>;
        layers = <1>;
    };

    combo_f4 {
        bindings = <&kp F4>;
        key-positions = <4 16>;
        layers = <1>;
    };

    combo_f5 {
        bindings = <&kp F5>;
        key-positions = <17 5>;
        layers = <1>;
    };

    combo_f6 {
        bindings = <&kp F6>;
        key-positions = <6 18>;
        layers = <1>;
    };

    combo_f7 {
        bindings = <&kp F7>;
        key-positions = <7 19>;
        layers = <1>;
    };

    combo_f8 {
        bindings = <&kp F8>;
        key-positions = <20 8>;
        layers = <1>;
    };

    combo_f9 {
        bindings = <&kp F9>;
        key-positions = <9 21>;
        layers = <1>;
    };

    combo_f10 {
        bindings = <&kp F10>;
        key-positions = <10 22>;
        layers = <1>;
    };

    combo_f11 {
        bindings = <&kp F11>;
        key-positions = <11 23>;
        layers = <1>;
    };

    combo_f12 {
        bindings = <&kp F12>;
        key-positions = <23 35>;
        layers = <1>;
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp SQT       &kp COMMA    &kp DOT              &kp P        &kp Y           &kp F            &kp G        &kp C         &kp R        &kp L          &kp BSPC
&kp TAB    &hml LSHFT A  &hml LALT O  &hml LEFT_CONTROL E  &hml LGUI U  &kp I           &kp D            &hmr RGUI H  &hmr RCTRL T  &hmr RALT N  &hmr RSHIFT S  &mt LA(LS(MINUS)) MINUS
&kp LSHFT  &kp SEMI      &kp Q        &kp J                &kp K        &kp X           &kp B            &kp M        &kp W         &kp V        &kp Z          &kp SLASH
                                      &kp LGUI             &lt 1 ENTER  &lt 2 ESCAPE    &lt 4 BACKSPACE  &lt 3 SPACE  &kp RALT
            >;
        };

        system {
            bindings = <
&kp LA(LG(N8))            &kp C_VOL_DN  &kp C_VOLUME_UP  &kp LG(C)   &kp LG(V)         &kp LG(LC(SPACE))    &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(LC(LG(NUMBER_4)))  &kp C_MUTE    &kp C_PREVIOUS   &kp C_NEXT  &kp C_PLAY_PAUSE  &kp LA(LG(ENTER))    &trans  &trans  &trans  &trans  &trans  &trans
&kp C_VOICE_COMMAND       &trans        &trans           &trans      &trans            &trans               &trans  &trans  &trans  &trans  &trans  &trans
                                                         &trans      &trans            &trans               &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&trans     &kp DQT    &kp LT     &kp GT    &kp HASH   &kp N1       &kp N2     &kp AMPS   &kp RBRC  &kp LBRC  &kp PRCNT  &trans
&kp LCTRL  &kp EXCL   &kp MINUS  &kp PLUS  &kp EQUAL  &kp UNDER    &kp PIPE   &kp COLON  &kp RPAR  &kp LPAR  &kp QMARK  &trans
&trans     &kp CARET  &kp FSLH   &kp STAR  &kp BSLH   &kp DLLR     &kp GRAVE  &kp TILDE  &kp RBKT  &kp LBKT  &kp AT     &trans
                                 &trans    &trans     &trans       &trans     &trans     &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans    &msc SCRL_DOWN  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &mt ENTER LC(LEFT)  &mt LC(ESCAPE) LC(RIGHT)
&trans  &trans  &trans  &trans  &mkp MB1  &trans    &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_LEFT   &kp LGUI            &kp LC(UP_ARROW)
&trans  &trans  &trans  &trans  &trans    &trans    &none           &none           &msc SCRL_LEFT  &msc SCRL_RIGHT  &kp LA(LCMD)        &kp LG(F3)
                        &trans  &trans    &trans    &trans          &trans          &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &mt LG(UP_ARROW) PAGE_UP      &kp LG(LEFT)        &kp UP_ARROW                    &kp LG(RIGHT)  &mt ENTER LC(LG(LEFT_ARROW))  &mt ESCAPE LC(LG(RIGHT))
&trans  &trans  &trans  &trans  &trans  &trans    &mt LG(DOWN_ARROW) PAGE_DOWN  &kp LEFT            &kp DOWN_ARROW                  &kp RIGHT      &mt LC(LG(C)) LC(NUMBER_6)    &mt LC(LG(Y)) F6
&trans  &trans  &trans  &trans  &trans  &trans    &mt LA(LG(COMMA)) LC(GRAVE)   &kp LA(LEFT_ARROW)  &mt LC(LG(J)) LC(LG(UP_ARROW))  &kp LA(RIGHT)  &mt LG(LS(C)) LS(LG(O))       &mt F8 F7
                        &trans  &trans  &trans    &trans                        &trans              &trans
            >;
        };

        board {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &trans  &trans    &kp UP    &trans     &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans        &trans        &kp DOWN      &kp UP        &trans        &trans  &trans    &trans    &trans     &trans  &trans
                                    &trans        &trans        &trans        &trans  &trans    &trans
            >;
        };
    };
};
